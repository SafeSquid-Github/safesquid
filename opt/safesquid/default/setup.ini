#Primary values, parent directories and suffixes.
#Given this information SafeSquid can create all folders and files using expansion logic provided below.
#default values should be provided to all of the following if not mention default values should be used.
USER="ssquid"
GROUP="root"
PROGRAM_NAME="safesquid"
PAM_FILE="${PROGRAM_NAME}"
RAMDEVICE="/dev/ram1"

LC_NUMERIC="en_US.UTF-8"
LC_ALL="en_US.UTF-8"

OPT_DIR="/opt/${PROGRAM_NAME}"
USR_LOCAL_DIR="/usr/local/${PROGRAM_NAME}"
TMP_DIR="/tmp/${PROGRAM_NAME}"
VAR_CACHE_DIR="/var/cache/${PROGRAM_NAME}"
VAR_DB_DIR="/var/db/${PROGRAM_NAME}"
VAR_LOG_DIR="/var/log/${PROGRAM_NAME}"
VAR_LIB_DIR="/var/lib/${PROGRAM_NAME}"
VAR_RUN_DIR="/var/run/${PROGRAM_NAME}"


BIN="bin"
MODULES="modules"
SECTIONS="sections"
DEFAULT="default"
LIBS="libs"
CONFIGURATION_FILE="startup.ini"
SETUP_FILE="setup.ini"


UPGRADE="upgrade"

SECURITY="security"
DNS="dns"
POLICIES="policies"
SSL="ssl"
IDENTITY="identity"
SUBCA="subca"
TRUSTED="trusted"
SQLITE="sqlite"
UI_ROOT="ui_root"
CGIBIN="cgi-bin"
TEMPLATES="templates"
RELOAD="reload"
STUB="safesquid.dns.conf"
SERVER_CONF="server.conf"
CONFIG_XML="config.xml"
DEFAULT_CONFIG_XML="default.config.xml"
TRUSTED_BUNDLE="trusted-ca-certificates.crt"
ROOT_CERTIFICATE="ROOT_X509File.cer"
ROOT_PRIVATE_KEY="ROOT_PrivateKeyFile.pem"
ACTIVATION_KEY="activation_key"
UPDATES="updates"
BACKUP="backup"


KEYTAB="HTTP.keytab"
KRBTKT="krb.tkt"
KRBCONF="krb5.conf"
KRBLOG="krb.log"
KRB5RCACHETYPE="none"
REPORT_DB_CONF="reporting_db.conf"
USER_DB_CONF="users.db.conf"
BYPASS_DB_CONF="bypass_db.conf"
UPGRATION_SCRIPT="update.sh"
SUPPORT_SCRIPT="support_tarball.sh"
APP_TEMPLATE_SCRIPT="app_template.sh"
BLOCK_BYPASS_TEMPLATE="block_bypass.html"
UI_MAIN_PAGE="index.html"
SUPPORT="support"
CONFIG_BACKUP_URL="https://dump.safesquid.net:443/backup/backup.php"
APP_SIGNATURE_URL="https://swgupdates2.safesquid.net:443/signatures/applications4.xml"
JOURNAL="journal"

BYPASS="bypass"
REPORT="report"
BADCERTS="badcerts"
CERTS="certs"
GOODCERTS="goodcerts"
SERIALS="serials"
USERS="users"

CONFIG="config"
DIAGNOSTICS="diagnostics"
EXTENDED="extended"
NATIVE="native"
PERFORMANCE="performance"
CONFIG_LOG="config.log"
CSP="csp"
CSP_LOG="csp.log"
DIAGNOSTICS_LOG="diagnostics"
EXTENDED_LOG="extended.log"
NATIVE_LOG="safesquid.log"
PERFORMANCE_LOG="performance.log"

STARTUP_LOG="/var/log/syslog"
LIB_KEEP_ALIVE="/usr/lib/libkeepalive.so"

XML_LIST="reporting.xml,configure.xml,utilities.xml,infrastructure.xml,antivirus.xml,profilesdef.xml,policymgr.xml,filter.xml,network.xml,ldap.xml,access.xml,accelerators.xml,general.xml,forward.xml,ftp.xml,sslcert.xml,clamav.xml,keywords-filtering.xml,redirect.xml,dnsbl.xml,category_editor.xml,timeprofiles.xml,respprofiles.xml,reqprofiles.xml,templates.xml,external.xml,applicationSignatures.xml,cache.xml,contentSignatures.xml,profiles.xml,cookies-filtering.xml,header-filtering.xml,limits.xml,prefetch.xml,upload.xml"




PIDFILE="${VAR_RUN_DIR}/${PROGRAM_NAME}.pid"
KRB5RCACHETYPE="none"


LOADAVG="/proc/loadavg"
STATM="/proc/self/statm"
SOMAXCONN=/proc/sys/net/core/somaxconn
PIPE_MAX_SIZE="/proc/sys/fs/pipe-max-size"
LDAP_CA="LDAP_CA_FILE.cer"
VZONE=".v.ssquid.in"
APPLICATION_SIGNATURES_FILE="applications4"
CONTENT_SIGNATURES_FILE="content4"
CONTENT_SIGNATURES="content_signatures"
APPLICATION_SIGNATURES="application_signatures"
MAGIC="${VAR_LIB_DIR}/${CONTENT_SIGNATURES}/magic.mgc"
BACKUP_FILES="/usr/local/safesquid/security/policies/config.xml,/usr/local/safesquid/security/ssl/ROOT_X509File.cer,/usr/local/safesquid/security/ssl/ROOT_PrivateKeyFile.pem"

#Provided above information SafeSquid can create all of the following.


BIN_DIR="${OPT_DIR}/${BIN}"
PROG="${BIN_DIR}/${PROGRAM_NAME}"
MODULES_DIR="${BIN_DIR}/${MODULES}"
SECTIONS_DIR="${BIN_DIR}/${SECTIONS}"
DEFAULT_DIR="${OPT_DIR}/${DEFAULT}"
LIBS_DIR="${OPT_DIR}/${LIBS}"
DEFAULT_CONFIGURATION_FILE_PATH="${DEFAULT_DIR}/${CONFIGURATION_FILE}"
CONFIGURATION_FILE_PATH="${OPT_DIR}/${CONFIGURATION_FILE}"
SETUP_FILE_PATH="${DEFAULT_DIR}/${SETUP_FILE}"

UPGRADE_FILE="${TMP_DIR}/${UPGRADE}"

EXTERNAL_DIR="${USR_LOCAL_DIR}/${BIN}"
SECURITY_DIR="${USR_LOCAL_DIR}/${SECURITY}"
DNS_DIR="${SECURITY_DIR}/${DNS}"
POLICIES_DIR="${SECURITY_DIR}/${POLICIES}"
SSL_DIR="${SECURITY_DIR}/${S_SSL}"
IDENTITY_DIR="${SECURITY_DIR}/${IDENTITY}"
SUBCA_DIR="${SECURITY_DIR}/${SUBCA}"
TRUSTED_DIR="${SECURITY_DIR}/${TRUSTED}"
SQLITE_DIR="${USR_LOCAL_DIR}/${SQLITE}"
UI_ROOT_DIR="${USR_LOCAL_DIR}/${UI_ROOT}"
CGIBIN_DIR="${UI_ROOT_DIR}/${CGIBIN}"
TEMPLATES_DIR="${UI_ROOT_DIR}/${TEMPLATES}"
DNS_RELOAD_PATH="${DNS_DIR}/${RELOAD}"
DNS_STUB_PATH="${DNS_DIR}/${STUB}"





CONFIG_XML_PATH="${POLICIES_DIR}/${CONFIG_XML}"
DEFAULT_CONFIG_XML_PATH="${POLICIES_DIR}/${DEFAULT_CONFIG_XML}"
TRUSTED_BUNDLE_PATH="${TRUSTED_DIR}/${TRUSTED_BUNDLE}"
ROOT_CERTIFICATE_PATH="${SSL_DIR}/${ROOT_CERTIFICATE}"
ROOT_PRIVATE_KEY_PATH="${SSL_DIR}/${ROOT_PRIVATE_KEY}"
ACTIVATION_KEY_PATH="${SECURITY_DIR}/${ACTIVATION_KEY}"
ACTIVATION_UPDATES_PATH="${ACTIVATION_KEY_PATH}.${UPDATES}"
ACTIVATION_UPDATES_BACKUP_PATH="${ACTIVATION_UPDATES_PATH}.${BACKUP}"
REPORT_DB_CONF_FILE_PATH="${SQLITE_DIR}/${REPORT_DB_CONF}"
KRB5_KTNAME="${SECURITY_DIR}/${KEYTAB}"
KRB5CCNAME="${SECURITY_DIR}/${KRBTKT}"
KRB5_CONFIG="${SECURITY_DIR}/${KRBCONF}"
KRB5_TRACE="${TMP_DIR}/${KRBLOG}"
UPGRADATION_SCRIPT_PATH="${CGIBIN}/${UPGRATION_SCRIPT}"
BLOCK_BYPASS_TEMPLATE_PATH="${TEMPLATES_DIR}/${BLOCK_BYPASS_TEMPLATE}"
UI_MAIN_PAGE_PATH="${UI_ROOT_DIR}/${UI_MAIN_PAGE}"
SUPPORT_DIR="${VAR_LOG_DIR}/${SUPPORT}"


BYPASS_DB_DIR="${VAR_DB_DIR}/${BYPASS}"
REPORT_DB_DIR="${VAR_DB_DIR}/${REPORT}"
SSL_DB_DIR="${VAR_DB_DIR}/${REPORT}"
BADCERTS_DB_DIR="${SSL_DB_DIR}/${BADCERTS}"
CERTS_DB_DIR="${SSL_DB_DIR}/${CERTS}"
GOODCERTS_DB_DIR="${SSL_DB_DIR}/${GOODCERTS}"
SERIALS_DB_DIR="${SSL_DB_DIR}/${SERIALS}"
USERS_DB_DIR="${VAR_DB_DIR}/${USERS}"


CONFIG_LOG_DIR="${VAR_LOG_DIR}/${CONFIG}"
CSP_LOG_DIR="${VAR_LOG_DIR}/${CSP}"
DIAGNOSTICS_LOG_DIR="${VAR_LOG_DIR}/${DIAGNOSTICS}"
EXTENDED_LOG_DIR="${VAR_LOG_DIR}/${EXTENDED}"
NATIVE_LOG_DIR="${VAR_LOG_DIR}/${NATIVE}"
PERFORMANCE_LOG_DIR="${VAR_LOG_DIR}/${PERFORMANCE}"
CONFIG_LOG_PATH="${CONFIG_LOG_DIR}/${CONFIG_LOG}"
CSP_LOG_PATH="${CSP_LOG_DIR}/${CSP_LOG}"
DIAGNOSTICS_LOG_PATH="${DIAGNOSTICS_LOG_DIR}/${DIAGNOSTICS_LOG}"
EXTENDED_LOG_PATH="${EXTENDED_LOG_DIR}/${EXTENDED_LOG}"
NATIVE_LOG_PATH="${NATIVE_LOG_DIR}/${NATIVE_LOG}"
PERFORMANCE_LOG_PATH="${PERFORMANCE_LOG_DIR}/${PERFORMANCE_LOG}"

SETCAP='CAP_SETFCAP,CAP_SYS_NICE=+eip'

#debugging with valgrind
#DEBUG_TOOL="valgrind"
[ "x${DEBUG_TOOL}" != "x" ] && DEBUGGER=`which ${DEBUG_TOOL}`
[ "x${DEBUGGER}" != "x" ] && DEBUG_LOG_DIR="${VAR_LOG_DIR}/${DEBUG_TOOL}"
[ "x${DEBUGGER}" != "x" ] && DEBUG_LOG_FILE=`date +"%Y%m%d-%H-%M-%S"`-${DEBUG_TOOL}.log
[ "x${DEBUGGER}" != "x" ] && [ "x${DEBUG_LOG_DIR}" != "x" ] && mkdir -p "${DEBUG_LOG_DIR}"
[ "x${DEBUGGER}" != "x" ] && DEBUG_OPTIONS="--log-file=${DEBUG_LOG_DIR}/${DEBUG_LOG_FILE} --tool=memcheck  --error-limit=no --trace-children=yes --demangle=yes --run-libc-freeres=yes"
[ "x${DEBUGGER}" != "x" ] && DEBUG_OPTIONS="${DEBUG_OPTIONS} --leak-check=full --show-leak-kinds=definite,possible --track-origins=yes --track-fds=yes"
[ "x${DEBUGGER}" != "x" ] && ln -fs ${DEBUG_LOG_DIR}/${DEBUG_LOG_FILE} ${DEBUG_LOG_DIR}/${DEBUG_TOOL}.log

