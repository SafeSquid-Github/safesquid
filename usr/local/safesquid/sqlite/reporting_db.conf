#SafeSquid Creates database in the following location if not exists.

DATABASE_PATH=/var/db/safesquid/report/safesquid2.db
DATABASE_PATH_SHM=/var/db/safesquid/report/safesquid2.db-shm
DATABASE_PATH_WAL=/var/db/safesquid/report/safesquid2.db-wal
SQLITE_WRITE=true
APPLICATION_ID=20170608
USER_VERSION=20170608
JOURNAL_MODE=WAL
#SafeSquid creates required tables, triggers and views using chained query.  
#Separate queries with semicolon(;) to prepare chained query

CHAINED_QUERY=CREATE TABLE IF NOT EXISTS record_id_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); CREATE TABLE IF NOT EXISTS bool_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO bool_master VALUES("FALSE",0); INSERT OR IGNORE INTO bool_master VALUES("TRUE",1); CREATE TABLE IF NOT EXISTS ip_address_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO ip_address_master VALUES("-",0); CREATE TABLE IF NOT EXISTS users_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO users_master VALUES("-",0); CREATE TABLE IF NOT EXISTS method_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO method_master VALUES("-",0); INSERT OR IGNORE INTO method_master VALUES("CONNECT",NULL); INSERT OR IGNORE INTO method_master VALUES("DELETE",NULL); INSERT OR IGNORE INTO method_master VALUES("GET",NULL); INSERT OR IGNORE INTO method_master VALUES("HEAD",NULL); INSERT OR IGNORE INTO method_master VALUES("OPTIONS",NULL); INSERT OR IGNORE INTO method_master VALUES("POST",NULL); INSERT OR IGNORE INTO method_master VALUES("PUT",NULL); INSERT OR IGNORE INTO method_master VALUES("PATCH",NULL); INSERT OR IGNORE INTO method_master VALUES("TRACE",NULL); INSERT OR IGNORE INTO method_master VALUES("BITS_POST",NULL); INSERT OR IGNORE INTO method_master VALUES("BCOPY",NULL); INSERT OR IGNORE INTO method_master VALUES("BDELETE",NULL); INSERT OR IGNORE INTO method_master VALUES("BMOVE",NULL); INSERT OR IGNORE INTO method_master VALUES("BPROPFIND",NULL); INSERT OR IGNORE INTO method_master VALUES("BPROPPATCH",NULL); INSERT OR IGNORE INTO method_master VALUES("COPY",NULL); INSERT OR IGNORE INTO method_master VALUES("LOCK",NULL); INSERT OR IGNORE INTO method_master VALUES("MKCOL",NULL); INSERT OR IGNORE INTO method_master VALUES("MOVE",NULL); INSERT OR IGNORE INTO method_master VALUES("NOTIFY",NULL); INSERT OR IGNORE INTO method_master VALUES("POLL",NULL); INSERT OR IGNORE INTO method_master VALUES("PROPFIND",NULL); INSERT OR IGNORE INTO method_master VALUES("PROPPATCH",NULL); INSERT OR IGNORE INTO method_master VALUES("SEARCH",NULL); INSERT OR IGNORE INTO method_master VALUES("SUBSCRIBE",NULL); INSERT OR IGNORE INTO method_master VALUES("UNLOCK",NULL); INSERT OR IGNORE INTO method_master VALUES("UNSUBSCRIBE",NULL); INSERT OR IGNORE INTO method_master VALUES("X-MS-ENUMATTS",NULL); CREATE TABLE IF NOT EXISTS url_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO url_master VALUES("-",0); CREATE TABLE IF NOT EXISTS useragent_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO useragent_master VALUES("-",0); CREATE TABLE IF NOT EXISTS mime_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO mime_master VALUES("-",0); CREATE TABLE IF NOT EXISTS filter_name_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO filter_name_master VALUES("-",0); CREATE TABLE IF NOT EXISTS filter_reason_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO filter_reason_master VALUES("-",0); CREATE TABLE IF NOT EXISTS interface_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO interface_master VALUES("-",0); CREATE TABLE IF NOT EXISTS cachecode_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO cachecode_master VALUES("-",0); INSERT OR IGNORE INTO cachecode_master VALUES("TCP_HIT" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("TCP_MISS" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("TCP_REFRESH_HIT" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("TCP_REF_FAIL_HIT" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("TCP_REFRESH_MISS" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("TCP_CLIENT_REFRESH" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("TCP_IMS_HIT" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("TCP_IMS_MISS" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("TCP_DENIED" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("UDP_HIT" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("UDP_MISS" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("UDP_HIT_OBJ" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("UDP_DENIED" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("UDP_INVALID" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("TCP_DNS_FAILED" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("TCP_CONNECTION_FAILED" , NULL ); INSERT OR IGNORE INTO cachecode_master VALUES("UNSPECIFIED" , NULL ); CREATE TABLE IF NOT EXISTS peercode_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO peercode_master VALUES("-",0); INSERT OR IGNORE INTO peercode_master VALUES("DIRECT" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("FIREWALL_IP_DIRECT" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("FIRST_PARENT_MISS" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("FIRST_UP_PARENT" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("LOCAL_IP_DIRECT" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("SIBLING_HIT" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("NO_DIRECT_FAIL" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("NO_PARENT_DIRECT" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("PARENT_HIT" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("SINGLE_PARENT" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("SOURCE_FASTEST" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("PARENT_UDP_HIT_OBJ" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("SIBLING_UDP_HIT_OBJ" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("PASSTHROUGH_PARENT" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("SSL_PARENT_MISS" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("DEFAULT_PARENT" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("ROUNDROBIN_PARENT" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("CLOSEST_PARENT_MISS" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("CLOEST_DIRECT" , NULL ); INSERT OR IGNORE INTO peercode_master VALUES("NONE" , NULL ); CREATE TABLE IF NOT EXISTS hosts_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO hosts_master VALUES("-",0); CREATE TABLE IF NOT EXISTS hosts_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO hosts_master VALUES("-",0); CREATE TABLE IF NOT EXISTS time_profiles_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO time_profiles_master VALUES("-",0); CREATE TABLE IF NOT EXISTS user_groups_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO user_groups_master VALUES("-",0); CREATE TABLE IF NOT EXISTS req_profiles_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO req_profiles_master VALUES("-",0); CREATE TABLE IF NOT EXISTS app_sig_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO app_sig_master VALUES("-",0); CREATE TABLE IF NOT EXISTS categories_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO categories_master VALUES("-",0); CREATE TABLE IF NOT EXISTS resp_profiles_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO resp_profiles_master VALUES("-",0); CREATE TABLE IF NOT EXISTS uc_types_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO uc_types_master VALUES("-",0); CREATE TABLE IF NOT EXISTS dc_types_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO dc_types_master VALUES("-",0); CREATE TABLE IF NOT EXISTS profiles_master (A TEXT UNIQUE, B INTEGER, PRIMARY KEY(B)); INSERT OR IGNORE INTO profiles_master VALUES("-",0); CREATE TABLE IF NOT EXISTS time_profiles_temp (A TEXT, B TEXT); CREATE TABLE IF NOT EXISTS user_groups_temp (A TEXT, B TEXT); CREATE TABLE IF NOT EXISTS req_profiles_temp  (A TEXT, B TEXT); CREATE TABLE IF NOT EXISTS app_sig_temp  (A TEXT, B TEXT); CREATE TABLE IF NOT EXISTS categories_temp  (A TEXT, B TEXT); CREATE TABLE IF NOT EXISTS resp_profiles_temp  (A TEXT, B TEXT); CREATE TABLE IF NOT EXISTS uc_types_temp  (A TEXT, B TEXT); CREATE TABLE IF NOT EXISTS dc_types_temp  (A TEXT, B TEXT); CREATE TABLE IF NOT EXISTS profiles_temp (A TEXT, B TEXT); CREATE TABLE IF NOT EXISTS s_temp_table (ID INTEGER, A TEXT, B NUMERIC, C NUMERIC, D INTEGER, E INTEGER, F NUMERIC, G INTEGER, H INTEGER, I INTEGER, J TEXT, K TEXT, L TEXT, M TEXT, N TEXT, O TEXT, P TEXT, Q TEXT, R TEXT, S TEXT, T TEXT, U TEXT, V TEXT, W TEXT, X TEXT, Y TEXT, Z TEXT, AA TEXT, PRIMARY KEY(ID)); CREATE VIEW IF NOT EXISTS  s_temp_table_view as select * from s_temp_table; CREATE VIEW IF NOT EXISTS time_profiles_view AS SELECT * FROM time_profiles_temp; CREATE VIEW IF NOT EXISTS user_groups_view AS SELECT * FROM user_groups_temp; CREATE VIEW IF NOT EXISTS req_profiles_view AS SELECT * FROM req_profiles_temp; CREATE VIEW IF NOT EXISTS app_sig_view AS SELECT * FROM app_sig_temp; CREATE VIEW IF NOT EXISTS categories_view AS SELECT * FROM categories_temp; CREATE VIEW IF NOT EXISTS resp_profiles_view AS SELECT * FROM resp_profiles_temp; CREATE VIEW IF NOT EXISTS uc_types_view AS SELECT * FROM uc_types_temp; CREATE VIEW IF NOT EXISTS dc_types_view AS SELECT * FROM dc_types_temp; CREATE VIEW IF NOT EXISTS profiles_view AS SELECT * FROM profiles_temp; CREATE VIEW IF NOT EXISTS main_view AS select main.A AS id , main.B AS client_id , main.C AS request_id , main.D AS date_time , main.E AS elapsed_time , main.F AS status , main.G AS size , main.H AS upload , main.I AS download , (select bool_master.A from bool_master WHERE main.J = bool_master.B) AS bypassed, (select ip_address_master.A from  ip_address_master WHERE  main.K = ip_address_master.B) AS client_ip, (select users_master.A from users_master WHERE  main.L = users_master.B) AS username , (select method_master.A from method_master WHERE  main.M = method_master.B) AS method , (select url_master.A from url_master WHERE  main.N = url_master.B) AS url , (select url_master.A from url_master WHERE  main.O = url_master.B)  AS http_referer, (select useragent_master.A  from   useragent_master WHERE  main.P = useragent_master.B) AS useragent, (select mime_master.A from  mime_master WHERE  main.Q = mime_master.B) AS mime , (select filter_name_master.A from filter_name_master WHERE  main.R = filter_name_master.B) AS filter_name , (select filter_reason_master.A  from filter_reason_master WHERE  S = filter_reason_master.B) AS filtering_reason, (select interface_master.A  from interface_master WHERE  main.T = interface_master.B) AS interface, (select cachecode_master.A  from cachecode_master WHERE  main.U = cachecode_master.B) AS cachecode, (select peercode_master.A from peercode_master WHERE  main.V = peercode_master.B) AS peercode  , (select hosts_master.A from hosts_master WHERE  main.W = hosts_master.B)  AS peer, (select hosts_master.A  from hosts_master WHERE  main.X = hosts_master.B) AS request_host, (select hosts_master.A   from hosts_master WHERE  main.Y = hosts_master.B) AS request_tld, (select hosts_master.A from hosts_master WHERE  main.Z = hosts_master.B)  AS referer_host, (select hosts_master.A  from hosts_master WHERE  main.AA = hosts_master.B) AS referer_tld from main;      
MAIN_DB=/var/db/safesquid/report/main.db
MAIN_TABLE=CREATE TABLE IF NOT EXISTS main  (A  INTEGER, B  INTEGER, C  INTEGER, D  INTEGER, E  INTEGER, F  INTEGER, G  INTEGER, H  INTEGER, I  INTEGER, J  INTEGER, K  INTEGER, L  INTEGER, M  INTEGER, N  INTEGER, O  INTEGER, P  INTEGER, Q  INTEGER, R  INTEGER, S  INTEGER, T  INTEGER, U  INTEGER, V  INTEGER, W  INTEGER, X  INTEGER, Y  INTEGER, Z  INTEGER, AA  INTEGER, PRIMARY KEY (A), FOREIGN KEY ([J]) REFERENCES bool_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([K]) REFERENCES ip_address_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([L]) REFERENCES users_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([M]) REFERENCES method_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([N]) REFERENCES url_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([O]) REFERENCES url_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([P]) REFERENCES useragent_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([Q]) REFERENCES mime_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([R]) REFERENCES filter_name_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([S]) REFERENCES filter_reason_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([T]) REFERENCES interface_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([U]) REFERENCES cachecode_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([V]) REFERENCES peercode_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([W]) REFERENCES hosts_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([X]) REFERENCES hosts_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([Y]) REFERENCES hosts_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([Z]) REFERENCES hosts_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION,  FOREIGN KEY ([AA]) REFERENCES hosts_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION ); CREATE TABLE IF NOT EXISTS time_profiles  (A INTEGER, B INTEGER, FOREIGN KEY ([A]) REFERENCES time_profiles_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY ([B]) REFERENCES record_id_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, PRIMARY KEY (A,B) ); CREATE TABLE IF NOT EXISTS user_groups  (A INTEGER, B INTEGER, FOREIGN KEY ([A]) REFERENCES user_groups_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY ([B]) REFERENCES record_id_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, PRIMARY KEY (A,B) ); CREATE TABLE IF NOT EXISTS req_profiles  (A INTEGER, B INTEGER, FOREIGN KEY ([A]) REFERENCES req_profiles_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY ([B]) REFERENCES record_id_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, PRIMARY KEY (A,B) ); CREATE TABLE IF NOT EXISTS app_sig  (A INTEGER, B INTEGER, FOREIGN KEY ([A]) REFERENCES app_sig_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY ([B]) REFERENCES record_id_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, PRIMARY KEY (A,B) ); CREATE TABLE IF NOT EXISTS categories  (A INTEGER, B INTEGER, FOREIGN KEY ([A]) REFERENCES categories_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY ([B]) REFERENCES record_id_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, PRIMARY KEY (A,B) ); CREATE TABLE IF NOT EXISTS resp_profiles  (A INTEGER, B INTEGER, FOREIGN KEY ([A]) REFERENCES resp_profiles_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY ([B]) REFERENCES record_id_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, PRIMARY KEY (A,B) ); CREATE TABLE IF NOT EXISTS uc_types  (A INTEGER, B INTEGER, FOREIGN KEY ([A]) REFERENCES uc_types_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY ([B]) REFERENCES record_id_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, PRIMARY KEY (A,B) ); CREATE TABLE IF NOT EXISTS dc_types  (A INTEGER, B INTEGER, FOREIGN KEY ([A]) REFERENCES dc_types_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY ([B]) REFERENCES record_id_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, PRIMARY KEY (A,B) ); CREATE TABLE IF NOT EXISTS profiles  (A INTEGER, B INTEGER, FOREIGN KEY ([A]) REFERENCES profiles_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY ([B]) REFERENCES record_id_master  ([B]) ON DELETE NO ACTION ON UPDATE NO ACTION, PRIMARY KEY (A,B) ); CREATE INDEX IF NOT EXISTS  date_time_index ON main ( D );
MAIN_DB_ATTACH=ATTACH "/var/db/safesquid/report/main.db" AS mainDB;
MAIN_DB_DETACH=DETACH DATABASE 'mainDB';
MAIN_DB_TRIGGER=CREATE TEMP TRIGGER IF NOT EXISTS populate_tables INSTEAD OF INSERT ON s_temp_table_view BEGIN INSERT INTO  record_id_master VALUES (new.A ,NULL); INSERT OR IGNORE INTO main VALUES( (select record_id_master.B from record_id_master WHERE new.A = record_id_master.A), new.B, new.C, new.D, new.E, new.F, new.G, new.H, new.I, (select bool_master.B from bool_master WHERE new.J = bool_master.A), (select ip_address_master.B from ip_address_master WHERE new.K = ip_address_master.A), (select users_master.B from users_master WHERE new.L = users_master.A), (select method_master.B from method_master WHERE new.M = method_master.A), (select url_master.B from url_master WHERE new.N = url_master.A), (select url_master.B from url_master WHERE new.O = url_master.A), (select useragent_master.B from useragent_master WHERE new.P = useragent_master.A), (select mime_master.B from mime_master WHERE new.Q = mime_master.A), (select filter_name_master.B from filter_name_master WHERE new.R = filter_name_master.A), (select filter_reason_master.B from filter_reason_master WHERE new.S = filter_reason_master.A), (select interface_master.B from interface_master WHERE new.T = interface_master.A), (select cachecode_master.B from cachecode_master WHERE new.U = cachecode_master.A), (select peercode_master.B from peercode_master WHERE new.V = peercode_master.A), (select hosts_master.B from hosts_master WHERE new.W = hosts_master.A), (select hosts_master.B from hosts_master WHERE new.X = hosts_master.A), (select hosts_master.B from hosts_master WHERE new.Y = hosts_master.A), (select hosts_master.B from hosts_master WHERE new.Z = hosts_master.A), (select hosts_master.B from hosts_master WHERE new.AA = hosts_master.A)); END; CREATE TEMP TRIGGER IF NOT EXISTS populate_time_profiles INSTEAD OF INSERT ON time_profiles_view BEGIN INSERT OR IGNORE INTO  time_profiles VALUES((select time_profiles_master.B from time_profiles_master where new.B=time_profiles_master.A), (select record_id_master.B from record_id_master WHERE new.A = record_id_master.A)); END; CREATE TEMP TRIGGER IF NOT EXISTS populate_user_groups INSTEAD OF INSERT ON user_groups_view BEGIN INSERT OR IGNORE INTO  user_groups VALUES((select user_groups_master.B from user_groups_master where new.B=user_groups_master.A), (select record_id_master.B from record_id_master WHERE new.A = record_id_master.A)); END; CREATE TEMP TRIGGER IF NOT EXISTS populate_req_profiles INSTEAD OF INSERT ON req_profiles_view BEGIN INSERT OR IGNORE INTO  req_profiles VALUES((select req_profiles_master.B from req_profiles_master where new.B=req_profiles_master.A), (select record_id_master.B from record_id_master WHERE new.A = record_id_master.A)); END; CREATE TEMP TRIGGER IF NOT EXISTS populate_app_sig INSTEAD OF INSERT ON app_sig_view BEGIN INSERT OR IGNORE INTO  app_sig VALUES((select app_sig_master.B from app_sig_master where new.B=app_sig_master.A), (select record_id_master.B from record_id_master WHERE new.A = record_id_master.A)); END; CREATE TEMP TRIGGER IF NOT EXISTS populate_categories INSTEAD OF INSERT ON categories_view BEGIN INSERT OR IGNORE INTO  categories VALUES((select categories_master.B from categories_master where new.B=categories_master.A), (select record_id_master.B from record_id_master WHERE new.A = record_id_master.A)); END; CREATE TEMP TRIGGER IF NOT EXISTS populate_resp_profiles INSTEAD OF INSERT ON resp_profiles_view BEGIN INSERT OR IGNORE INTO  resp_profiles VALUES((select resp_profiles_master.B from resp_profiles_master where new.B=resp_profiles_master.A), (select record_id_master.B from record_id_master WHERE new.A = record_id_master.A)); END; CREATE TEMP TRIGGER IF NOT EXISTS populate_uc_types INSTEAD OF INSERT ON uc_types_view BEGIN INSERT OR IGNORE INTO  uc_types VALUES((select uc_types_master.B from uc_types_master where new.B=uc_types_master.A), (select record_id_master.B from record_id_master WHERE new.A = record_id_master.A)); END; CREATE TEMP TRIGGER IF NOT EXISTS populate_dc_types INSTEAD OF INSERT ON dc_types_view BEGIN INSERT OR IGNORE INTO  dc_types VALUES((select dc_types_master.B from dc_types_master where new.B=dc_types_master.A), (select record_id_master.B from record_id_master WHERE new.A = record_id_master.A)); END; CREATE TEMP TRIGGER IF NOT EXISTS populate_profiles INSTEAD OF INSERT ON profiles_view BEGIN INSERT OR IGNORE INTO  profiles VALUES((select profiles_master.B from profiles_master where new.B=profiles_master.A), (select record_id_master.B from record_id_master WHERE new.A = record_id_master.A)); END;